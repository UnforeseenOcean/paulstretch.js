{
  "name": "ndfft",
  "version": "0.0.0",
  "description": "n-dimensional fast Fourier transform for JavaScript",
  "main": "ndfft.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "bit-twiddle": "~0.0.1"
  },
  "devDependencies": {},
  "scripts": {
    "test": "node test/test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mikolalysenko/ndfft.git"
  },
  "keywords": [
    "fft",
    "nd",
    "ndfft",
    "fourier",
    "transform",
    "convolution",
    "spectral",
    "spectrum"
  ],
  "author": {
    "name": "Mikola Lysenko"
  },
  "license": "BSD",
  "readmeFilename": "README.md",
  "gitHead": "a6005f4f2ab4d56e8a35a4348f925fa13cddd4b7",
  "readme": "ndfft\n=====\nComplex n-dimensional radix-2 FFT codes for JavaScript.  Derived from [Paul Bourke's C FFT codes](http://paulbourke.net/miscellaneous/dft/).  This routine is not particularly optimized, but it should get the job done.\n\nUsage/Install\n=============\nTo install:\n\n    npm install ndfft\n    \nAnd to use it\n\n    var ndfft = require(\"ndfft\");\n    \n    var re = [[1, 0], [0, 0]];\n    var im = [[0, 0], [0, 0]];\n    \n    //Forward transform\n    ndfft(1, re, im);\n\n    //Inverse transform\n    ndfft(-1, re, im);\n\n\n`require(\"ndfft\")(direction, real, imag)`\n-----------------------------------------\nExecutes an n-place n-dimensional Fast Fourier transform.\n\n* `direction`: a number set to +/- 1, representing the direction of the fft.\n* `real`: The real part of the array.  Each dimension must be a power of two.\n* `imag`: The imaginary part of the array.  Must have same dimensions as x\n\nThe fourier transform is computed in place.  No value is returned from this method.\n\nCredits\n=======\n(c) 1993 Paul Bourke.  Public domain\n\nJavaScript port by Mikola Lysenko (c) 2013.\n",
  "bugs": {
    "url": "https://github.com/mikolalysenko/ndfft/issues"
  },
  "homepage": "https://github.com/mikolalysenko/ndfft",
  "_id": "ndfft@0.0.0",
  "_from": "ndfft@~0.0.0"
}
